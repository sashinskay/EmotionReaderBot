import logging
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
import aiohttp
import os
from dotenv import load_dotenv

load_dotenv()

TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
API_URL = "http://localhost:8000/predict"

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

logging.basicConfig(level=logging.INFO)

# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
start_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [
            KeyboardButton(text="üìù –¢–µ–∫—Å—Ç–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑"),
            KeyboardButton(text="üé¨ GIF-–∞–Ω–∞–ª–∏–∑")
        ]
    ],
    resize_keyboard=True
)

# –°–ª–æ–≤–∞—Ä—å —Å GIF-–∞–Ω–∏–º–∞—Ü–∏—è–º–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —ç–º–æ—Ü–∏–π
emotion_gifs = {
    "POSITIVE": "https://getfile.dokpub.com/yandex/get/https://disk.yandex.ru/i/SNt3YSnpfzG7aA",
    "NEGATIVE": "https://getfile.dokpub.com/yandex/get/https://disk.yandex.ru/i/ZkhpWTSMQtVr9Q",
    "NEUTRAL": "https://getfile.dokpub.com/yandex/get/https://disk.yandex.ru/i/K8qung4KckZTcg"
}

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
user_modes = {}

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    user_modes[message.from_user.id] = "text"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç!\n "
        "–Ø –º–æ–≥—É –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é –æ–∫—Ä–∞—Å–∫—É —Ç–µ–∫—Å—Ç–∞.\n"
        "–í—ã–±–µ—Ä–∏ —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:",
        reply_markup=start_keyboard
    )

@dp.message_handler(lambda message: message.text == "üìù –¢–µ–∫—Å—Ç–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑")
async def enable_text_mode(message: types.Message):
    user_modes[message.from_user.id] = "text"
    await message.answer("–†–µ–∂–∏–º —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. \n–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ç–µ–∫—Å—Ç!")

@dp.message_handler(lambda message: message.text == "üé¨ GIF-–∞–Ω–∞–ª–∏–∑")
async def enable_gif_mode(message: types.Message):
    user_modes[message.from_user.id] = "gif"
    await message.answer("–†–µ–∂–∏–º GIF-–∞–Ω–∞–ª–∏–∑–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. \n–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ç–µ–∫—Å—Ç!")

@dp.message_handler(content_types=types.ContentTypes.TEXT)
async def analyze_text(message: types.Message):
    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –∏ –∫–Ω–æ–ø–∫–∏
    if message.text in ["üìù –¢–µ–∫—Å—Ç–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑", "üé¨ GIF-–∞–Ω–∞–ª–∏–∑"]:
        return

    user_id = message.from_user.id
    current_mode = user_modes.get(user_id, "text")  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º

    async with aiohttp.ClientSession() as session:
        async with session.post(API_URL, json={"text": message.text}) as resp:
            if resp.status == 200:
                data = await resp.json()
                label = data["label"]
                score = data["score"]
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –∏ GIF
                if label == "POSITIVE":
                    emoji = "üòä"
                    gif = emotion_gifs["POSITIVE"]
                elif label == "NEGATIVE":
                    emoji = "üò†"
                    gif = emotion_gifs["NEGATIVE"]
                else:
                    emoji = "üòê"
                    gif = emotion_gifs["NEUTRAL"]
                
                response_text = (
                    f"–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –æ–∫—Ä–∞—Å–∫–∞: {label} {emoji}\n"
                    f"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {score:.2f}"
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
                if current_mode == "gif":
                    try:
                        await message.answer_animation(
                            animation=gif,
                            caption=response_text
                        )
                    except Exception as e:
                        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ GIF: {e}")
                        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å GIF, –≤–æ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑:\n\n" + response_text)
                else:
                    await message.answer(response_text)
            else:
                await message.answer("–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ üò¢")

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)